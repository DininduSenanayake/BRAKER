%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                                                 %
%           BRAKER2                                                                               %
%                                                                                                 %
%           Authors: Katharina J. Hoff                                                            %
%                                                                                                 %
%           Contact: katharina.hoff@uni-greifswald.de                                             %
%                                                                                                 %
%           Date: November 8th 2017                                                               %
%                                                                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  1.  INTRODUCTION
  2.  INSTALLATION
  3.  RUNNING BRAKER2
  4.  OUTPUT OF BRAKER2
  5.  EXAMPLE DATA

              1. INTRODUCTION
              ---------------
BRAKER2 is a pipeline for unsupervised RNA-Seq-based genome annotation that combines the advantages 
of GeneMark-ET and AUGUSTUS. BRAKER2 requires an RNA-Seq read alignment file (in the bam format) 
and a genome file as input. First,  GeneMark-ET performs iterative training and generates initial 
gene structures using support from RNA-Seq. Second, AUGUSTUS uses predicted genes for training and
then integrates RNA-Seq read information as extrinsic evidence into final gene predictions. For 
more information on AUGUSTUS or GeneMark-ET see their respective README files. Further, if a 
protein sequence file in fasta format and/or an alignment output file from Spaln, GenomeThreader or
 exonerate and/or additional hints (from protein sequences) are given, BRAKER2 integrates the 
extrinsic evidence information from protein sequences into the AUGUSTUS gene prediction step.

              2. INSTALLATION
              ---------------

At the time of release, this BRAKER2 version, the pipeline was tested with:

   * AUGUSTUS 3.2.2
   * GeneMark-ET 4.32
   * BAMTOOLS 2.4.1
   * SAMTOOLS 0.1.19-96b5f2294a
   * GenomeThreader 1.1.6
   * Spaln 2.3.1
   * Exonerate 2.2.0

1. Download GeneMark-ET from http://exon.gatech.edu/GeneMark/license_download.cgi

2. Download AUGUSTUS from http://bioinf.uni-greifswald.de/augustus/downloads/index.php

3. Download BAMTOOLS (e.g. e.g. git clone https://github.com/pezmaster31/bamtools.git)

4. If you wish to run protein to genome alignments with BRAKER2, download at least one of the 
   following alignment tools:

   * GenomeThreader from http://genomethreader.org/
   * Spaln from http://www.genome.ist.i.kyoto-u.ac.jp/~aln_user
   * Exonerate from https://github.com/nathanweeks/exonerate (or on Ubuntu, download and install 
     via "apt-get install exonerate")

5. Install BAMTOOLS by typing the following in your shell:

   cd your-bamtools-directory
   mkdir build
   cd build
   cmake ..
   make

6. Unpack and install GeneMark-ET as described in GeneMark-ET's README file.

7. Unpack and install AUGUSTUS. AUGUSTUS comes with pre-compiled binaries (located in the 
   augustus-x.x.x/bin folder). However, you should compile AUGUSTUS on your own system in order
   to avoid future problems. Compilation instructions are provided in the AUGUSTUS README file
   (augustus-x.x.x/README.txt).
   Make sure, you also compile bam2hints (included in the main AUGUSTUS Makefile; in case
   of problems, you find further instructions on bam2hints compilation in the file
   augustus-x.x.x/auxprogs/bam2hints/README).
   BRAKER2 needs writing access to the AUGUSTUS directory config/. If you install AUGUSTUS
   globally, you need to copy config/ to a location where users have writing permission.

8. Optional: 
      SAMTOOLS is not required for running BRAKER2 if all your files are formatted, correctly
      (i.e. all sequences should have short and unique fasta names). If you are not sure
      whether all your files are fomatted correctly, it might be helpful to have SAMTOOLS
      installed (BRAKER2 will then try to use SAMTOOLS to solve certain issues).

      As a prerequisite for SAMTOOLS, download and install htslib (e.g. 
      git clone https://github.com/samtools/htslib.git, follow the htslib documentation for 
      installation).

      Download and install SAMTOOLS (e.g. git clone git://github.com/samtools/samtools.git), 
      subsequently follow SAMTOOLS documentation for installation). 

9. Install the required PERL modules available on CPAN:
   			    File::Spec::Functions
				Hash::Merge
				List::Util
				Logger::Simple
				Module::Load::Conditional
				Parallel::ForkManager
				POSIX
				Scalar::Util::Numeric
				YAML 
   (on Ubuntu, install the modules e.g. with CPANminus: "cpanm [Module::Name]")

   BRAKER2 also uses the PERL module helpMod.pm that is not available on CPAN. This module is 
   part of the BRAKER2 relase and does not require separate installation.

10. Optional:
       If you would like BRAKER2 to produce protein to genome alignments, install one or
       several protein alignment tools (BRAKER2 will only execute one out of Spaln, GenomeThreader
       and Exonerate at each run).

           * GenomeThreader: Unpack and install according to gth/README
	   * Spaln: Unpack and install according to spaln/doc/SpalnReadMe22.pdf
	   * Exonerate: Unpack and install according to exonerate/README
	                (or on Ubuntu: sudo apt-get install exonerate)
	Currently, we recommend the usage of GenomeThreader due to software availability
	and runtime.

11. Add the directories in which braker.pl, AUGUSTUS executables, AUGUSTUS scripts reside to 
    your $PATH environment variable, e.g. for your current bash session:

    PATH=/my_path_to_braker/:/my_path_to_augustus/bin/:/my_path_to_augustus/scripts/:$PATH
    export PATH

    You may want to add these lines to a startup script (like ~/.bashrc).

    Exporting the location of AUGUSTUS and AUGUSTUS scripts is not required 
    by BRAKER2 if you set the environment variables in step 10.

12. Optional: set environment variable  $AUGUSTUS_CONFIG_PATH, $GENEMARK_PATH and 
              $BAMTOOLS_PATH (and $SAMTOOLS_PATH)

    The $AUGUSTUS_CONFIG_PATH determines which directory is used for reading and writing species 
    configuration files (and in case of local installation, also for finding augustus binaries
    and scripts). During training, AUGUSTUS writes species-specific parameter files to this 
    directory. Therefore, you need write permissions for the directory that is 
    $AUGUSTUS_CONFIG_PATH. 
    If the $AUGUSTUS_CONFIG_PATH environment variable is not set, then the programs will look in 
    the path ../config relative to the directory in which the AUGUSTUS executable is located. If 
    required, export the variable e.g. for your current bash session:

    export AUGUSTUS_CONFIG_PATH=/my_path_to_AUGUSTUS/augustus/config/

    $AUGUSTUS_CONFIG_PATH - if exported - is also used by BRAKER2 to determine the relative 
    			    path to the AUGUSTUS executable, AUGUSTUS scripts and bam2hints (local
                            installaton). (This can be overruled by setting command line
                            options AUGUSTUS_BIN_PATH and AUGUSTUS_SCRIPTS_PATH).

    If the environment variable $GENEMARK_PATH is set, BRAKER2 will look there for the 
    gmes_etap.pl script. Export the variable e.g. for your current bash session:

    export GENEMARK_PATH=/my_path_to_GeneMark-ET/gmes_petap/

    If the environment variable $BAMTOOLS_PATH is set, BRAKER2 will look there for the bamtools 
    executable. Export the variable e.g. for your current bash session:

    export BAMTOOLS_PATH=/my_path_to_bamtools/bin/

    If the environment variable $SAMTOOLS_PATH is set, BRAKER2 will look there for the samtools 
    executable. Export the variable e.g. for your current bash session:

    export SAMTOOLS_PATH=/my_path_to_samtools/

    You may want to add these lines to a startup script (like ~/.bashrc). Pay attention, that you 
    do not specify the actual executable when exporting paths, but only the path to where the 
    executable resides.

    Alternatively, you can specify these directories on the command line when running BRAKER2:

    --AUGUSTUS_CONFIG_PATH=/my_path_to_AUGUSTUS/augustus/config/ 
    --GENEMARK_PATH=/my_path_to_GeneMark-ET/gmes_petap/
    --BAMTOOLS_PATH=/my_path_to_bamtools/bin/
    --SAMTOOLS_PATH=/my/path_to_samtools/

              3. RUNNING BRAKER2
              ------------------

BRAKER2 has two mandatory arguments: a genome file in fasta format and one file containing 
information on RNA-Seq alignments to that genome file (either in bam format or in AUGUSTUS hints 
format).

The genome file contains the DNA input sequence and must be in uncompressed (multiple) fasta 
format, the file may look like this:

>name_of_sequence_1
agtgctgcatgctagctagct
>name_of_sequence_2
gtgctngcatgctagctagctggtgtnntgaaaaatt

Every letter other than a,c,g,t,A,C,G and T is interpreted as an unknown base. Digits and white 
spaces are ignored. The number of characters per line is not restricted.

For RNA-Seq information, you can either specify a bam-file or a hints file generated from RNA-Seq 
alignment information. The bam file contains unassembled RNA-Seq read alignments. Alternatively to
the bam file, spliced alignment information may be passed as "intron hints" in gff format using the
 argument --hints=gff-hintsfilename, the file may look like this:

contig_name	b2h	intron	2740	2888	25	+	.	.

Required values in the gff format file for GeneMark-ET (for more details, see 
http://www.sanger.ac.uk/resources/software/gff/spec.html):

Column <seqname>     value should match the corresponding definition line in the FASTA file with
                     sequence
Column <source>      in this case b2h
Column <feature>     value "intron" (obligatory!)
Columns <start><end> intron coordinates, <start> points to first nucleotide of intron and <end> to
                     the last one. Index starts from "1"
Column <score>       in case of TopHat2, score is the number of reads spanning this intron 
                     (reported by TopHat2)
                     in case of UnSplicer or TrueSight, score is the probability like estimate of 
                     intron quality, reported by these tools
Column <strand>     + or -
Values in other columns (frame and attribute) are not used in this program version.


IMPORTANT: the names of contigs in <seqname> column in gff must be found as sequence names in the 
corresponding FASTA file (in the usage example below: genome.fa)!

IMPORTANT: With BRAKER2, it is possible to specify a single hints file that contains hints from 
RNA-Seq data (for training GeneMark-ET and predicting genes with AUGUSTUS) and that contains hints
from proteins (for predicting genes with AUGUSTUS, only). If you are using protein and RNA-Seq 
evidence, the source tag must be "b2h" for RNA-Seq derived hints, and must be something else for 
protein derived hints (or nothing, if protein evidence is to be drived by BRAKER2 from alignments or 
fasta input file).

Usage:

perl braker.pl [OPTIONS] --genome=genome.fa --bam=RNAseq.bam
perl braker.pl [OPTIONS] --genome=genome.fa --hints=RNAseq.gff
perl braker.pl [OPTIONS] --genome=genome.fa --bam=RNAseq.bam --prot_seq=protein.fa \
     --prg=gth|exonerate|spaln --ALIGNMENT_TOOL_PATH=/path/to/protaligner
perl braker.pl [OPTIONS] --genome=genome.fa --hints=RNAseq.gff --prot_seq=protein.fa\
     --prg=gth|exonerate|spaln --ALIGNMENT_TOOL_PATH=/path/to/protaligner
perl braker.pl [OPTIONS] --genome=genome.fa --hints=RNAseqAndProtein.gff

'genome.fa' is the filename (including relative path) to the file containing the query sequence(s) 
            in fasta format.
'RNAseq.bam' is the filename (including relative path) to the file containing the RNA-seq alignment
             data in bam format.
'RNAseq.gff' is the filename (including relative path) to the file containing introns extracted 
             from RNA-Seq information in gff format.
'protein.fa' is the filename (including relative path) to the file containg protein sequence(s) in
             fasta format.
'RNAseqAndProtein.gff' is the filename (including relative path) to the file containing introns 
                       extracted from RNA-Seq information and introns and other hints extracted 
                       from protein data in gff format.

Selected parameters:

--nice
  Executes (almost) all system calls by braker.pl with bash nice (default nice level)

--alternatives-from-evidence=true/false
  Report alternative transcripts when they are suggested by hints, default is true.

--AUGUSTUS_CONFIG_PATH=/my_path_to_AUGUSTUS/augustus/config/ 
  Path to AUGUSTUS config directory (if not specified as environment variable). Has higher priority 
  than the environment variable.

--AUGUSTUS_BIN_PATH=/my_path_to_AUGUSTUS_bin/
  Path to AUGUSTUS bin directory. If a local installation
  exists (i.e. AUGUSTUS_CONFIG_PATH/../ contains bin/ and scripts/), AUGUSTUS_BIN_PATH must not
  be specified.
  
--AUGUSTUS_SCRIPTS_PATH=/my_path_to_AUGUSTUS_scripts/
  Path to AUGUSTUS scripts directory. If a local installation exists (i.e. AUGUSTUS_CONFIG_PATH/../
  contains scripts/) or if AUGUSTUS_BIN_PATH/../ contains scripts/, this argument must not
  be specified.

--cores=n
  Specifies the maximum number of cores that can be used during computation

--fungus
  GeneMark-ET option: to run algorithm with branch point model (most useful for fungal genomes)

--GENEMARK_PATH=/my_path_to_GeneMark-ET/gmes_petap/
  Path to GeneMark-ET (if not specified as environment variable). Has higher priority than 
  environment variable.

--BAMTOOLS_PATH=/path/to/bamtools/
  Path to bamtools (if not specified as environment variable). Has higher priority than the
  environment variable.

--SAMTOOLS_PATH=/path/to/samtools/
  Optional: set path to samtools (if not specified as environment variable). In some cases, users
  of BRAKER2 reported that they "shortend" the headers of FASTA files after their first attempt to 
  run BRAKER2, but they forgot to fix the same sequence names in the BAM file. SAMTOOLS is used by
  BRAKER2 to automatically fix such issues. The command line flag has higher priority than 
  environment variable.

--hints=hints.gff            
  Additional hints files for gene predictions with AUGUSTUS in gff format (should only be used in 
  combination with --optCfgFile)

--prot_seq=prot.fa
  A protein sequence file in multiple fasta format. This file will be used to generate protein 
  hints for AUGUSTUS by running one of the three alignment tools Exonerate (--prg=exonerate), Spaln
  (--prg=spaln), or GenomeThreader (--prg=gth). Default is GenomeThreader if the tool is not 
  specified. Currently, hints from proteins are only used in the prediction step with AUGUSTUS. 

--prot_aln=prot.aln
  Alignment file generated from aligning protein sequences against the genome with either Exonerate
  (--prg=exonerate), or Spaln (--prg=spaln), or GenomeThreader (--prg=gth).
  To prepare alignment file, run Spaln2 with the following command:
     spaln -O0 ... > spalnfile
  To prepare alignment file, run Exonerate with the following command:
     exonerate --model protein2genome --showtargetgff T ... > exfile
  To prepare alignment file, run GenomeThreader with the following command:
     gth -genomic genome.fa  -protein protein.fa -gff3out -skipalignmentout ... -o gthfile
  A valid option prg=... must be specified in combination with --prot_aln. Generating tool will not 
  be guessed. Currently, hints from proteins are only used in the prediction step with AUGUSTUS.                                                                          

--prg=gth|exonerate|spaln
  Alignment tool gth (GenomeThreader), exonerate (Exonerate) or Spaln2 (spaln) that will be used to
  generate protein alignments that will be the basis for hints generation for gene prediction with
  AUGUSTUS (if specified in combination with --prot_seq) or that was used to externally generate an
  alignment file with the commands listed in description of --prot_aln (if used in combination with 
  --prot_aln).

--ALIGNMENT_TOOL_PATH=/path/to/tool
  Set path to alignment tool (GenomeThreader, Spaln, or Exonerate) if not specified as environment 
  variable ${ALIGNMENT_TOOL_PATH} (this will usually be the path to only one of the alignment 
  tools, the one that is specified with option --prg=..."). Has higher priority than environment
  variable .

--extrinsicCfgFile=file
  Optional config file for AUGUSTUS, should be used if --hints is used, and if you desire to use 
  extrinsic configuration parameters deviating from the BRAKER2 default values.

--optCfgFile=ppx.cfg
  Optional custom config file for AUGUSTUS 

--overwrite
  Overwrite existing files

--skipGeneMark-ET
  Skip GeneMark-ET and use provided GeneMark-ET output (e.g. from a different source)
 
--skipOptimize
  Skip optimize parameter step (not recommended!)

--softmasking

--useexisting
  Use the present config and parameter files if they exist for 'speciesname'

--UTR=on/off
  Predict the untranslated regions in addition to the coding sequence. This currently works only 
  for the species human, galdieria, toxoplasma and caenorhabditis.

--crf
  Execute CRF training for AUGUSTUS; resulting parameters are only kept for final predictions if 
  they show higher accuracy than HMM parameters.

--workingdir=/path/to/wd/
  Path to working directory in which results and temporary files are stored (default: current 
  directory).

--species=speciesname
  speciesname is a directory in ${AUGUSTUS_CONFIG_PATH}/species, which is used to read AUGUSTUS 
  species parameters from, and write such parameter so. Usually, BRAKER2 is used to train AUGUSTUS
  for new species, i.e. the speciesname should be a species name that does not already exist in 
  ${AUGUSTUS_CONFIG_PATH}/species. Existing species files will not be overwritten. If the argument 
  --species is not used, BRAKER2 generates speciesnames of the type Sp_1 etc. For example you may 
  type

--augustus-args="--some_arg=bla"
  For expert AUGUSTUS users: One or several command line arguments to be passed to AUGUSTUS (in 
  addition to the arguments that are already passed by BRAKER2), if several arguments are given, 
  separate by whitespaces, i.e. "--first_arg=sth --second_arg=sth".
										  

--nice
  execute all time consuming subprocesses of braker.pl with bash program "nice" (default nice 
  level)

--version
  Print version number of braker.pl

  perl braker --species=new_species  --genome=../examples/example.fa  --bam=../examples/example.bam

  to create a new species 'new_species'.

  Alternatively to training AUGUSTUS, it is possible run AUGUSTUS with already existing parameters.
  In that case, speciesname can be any of the species names contained in 
  ${AUGUSTUS_CONFIG_PATH}/species. In the following, you find a list of species identifiers that 
  may be used as speciesname (for use with --useexisting) and that are part of the current AUGUSTUS
  release:

   identifier                               | species
   -----------------------------------------|----------------------
   human                                    | Homo sapiens
   fly                                      | Drosophila melanogaster
   arabidopsis                              | Arabidopsis thaliana
   brugia                                   | Brugia malayi
   aedes                                    | Aedes aegypti
   tribolium                                | Tribolium castaneum
   schistosoma                              | Schistosoma mansoni
   tetrahymena                              | Tetrahymena thermophila
   galdieria                                | Galdieria sulphuraria
   maize                                    | Zea mays
   toxoplasma                               | Toxoplasma gondii
   caenorhabditis                           | Caenorhabditis elegans
   (elegans)                                | Caenorhabditis elegans 
   aspergillus_fumigatus                    | Aspergillus fumigatus
   aspergillus_nidulans                     | Aspergillus nidulans
   (anidulans)                              | Aspergillus nidulans
   aspergillus_oryzae                       | Aspergillus oryzae
   aspergillus_terreus                      | Aspergillus terreus
   botrytis_cinerea                         | Botrytis cinerea
   candida_albicans                         | Candida albicans
   candida_guilliermondii                   | Candida guilliermondii
   candida_tropicalis                       | Candida tropicalis
   chaetomium_globosum                      | Chaetomium globosum
   coccidioides_immitis                     | Coccidioides immitis
   coprinus                                 | Coprinus cinereus
   coprinus_cinereus                        | Coprinus cinereus
   coyote_tobacco                           | Nicotiana attenuata
   cryptococcus_neoformans_gattii           | Cryptococcus neoformans gattii
   cryptococcus_neoformans_neoformans_B     | Cryptococcus neoformans neoformans
   cryptococcus_neoformans_neoformans_JEC21 | Cryptococcus neoformans neoformans
   (cryptococcus)                           | Cryptococcus neoformans
   debaryomyces_hansenii                    | Debaryomyces hansenii
   encephalitozoon_cuniculi_GB              | Encephalitozoon cuniculi
   eremothecium_gossypii                    | Eremothecium gossypii
   fusarium_graminearum                     | Fusarium graminearum
   (fusarium)                               | Fusarium graminearium
   histoplasma_capsulatum                   | Histoplasma capsulatum
   (histoplasma)                            | Histoplasma capsulatum
   kluyveromyces_lactis                     | Kluyveromyces lactis
   laccaria_bicolor                         | Laccaria bicolor
   lamprey                                  | Petromyzon marinus
   leishmania_tarentolae                    | Leishmania tarentolae
   lodderomyces_elongisporus                | Lodderomyces elongisporus
   magnaporthe_grisea                       | Magnaporthe grisea
   neurospora_crassa                        | Neurospora crassa
   (neurospora)                             | Neurospora crassa
   phanerochaete_chrysosporium              | Phanerochaete chrysosporium
   (pchrysosporium)                         | Phanerochaete chrysosporium
   pichia_stipitis                          | Pichia stipitis
   rhizopus_oryzae                          | Rhizopus oryzae
   saccharomyces_cerevisiae_S288C           | Saccharomyces cerevisiae
   saccharomyces_cerevisiae_rm11-1a_1       | Saccharomyces cerevisiae
   (saccharomyces)                          | Saccharomyces cerevisiae
   schizosaccharomyces_pombe                | Schizosaccharomyces pombe
   thermoanaerobacter_tengcongensis         | Thermoanaerobacter tengcongensis
   trichinella                              | Trichinella spiralis
   ustilago_maydis                          | Ustilago maydis
   (ustilago)                               | Ustilago maydis
   yarrowia_lipolytica                      | Yarrowia lipolytica
   nasonia                                  | Nasonia vitripennis
   tomato                                   | Solanum lycopersicum
   chlamydomonas                            | Chlamydomonas reinhardtii
   amphimedon                               | Amphimedon queenslandica
   pneumocystis                             | Pneumocystis jirovecii
   wheat                                    | Triticum aestivum
   chicken                                  | Gallus gallus

   The identifiers in parentheses denote older versions for that species.

              4. OUTPUT OF BRAKER2
              --------------------

BRAKER2 produces three important output files in the working directory:

hintsfile.gff             - The introns extraced from RNAseq.bam. These introns are used for
                            training GeneMark-ET and for predicting genes with AUGUSTUS. The file
                            is in gff format (see section 3, input argument --hints).
GeneMark-ET/genemark.gtf  - Genes predicted by GeneMark-ET in gtf format
augustus.gff              - Genes predicted by AUGUSTUS in gtf format

For details about gtf format, see http://www.sanger.ac.uk/Software/formats/GFF/. A gtf format file
contains one line per predicted exon. Example:

HS04636   AUGUSTUS   initial    966     1017    .       +       0       transcript_id "g1.1"; gene_id "g1";
HS04636   AUGUSTUS   internal   1818    1934    .       +       2       transcript_id "g1.1"; gene_id "g1";

The columns (fields) contain: 
seqname   source     feature    start   end   score   strand   frame    transcript ID and gene ID


              5. EXAMPLE DATA
              ---------------

Due to file size, example data for testing BRAKER2 is separately available for download at 
http://bioinf.uni-greifswald.de/augustus/downloads/index.php and http://exon.gatech.edu/ as archive
BRAKER2examples.tar.gz.

After extraction, test BRAKER2 with the following commands:

1) For usage with RNA-Seq, only (BRAKER1 functionality):

perl braker.pl --genome=/path/to/examples/genome.fa --bam=/path/to/examples/RNAseq.bam

2) For usage with RNA-Seq and proteins (BRAKER2 functionaliy, adapt command to aligner of your 
   choice):

perl braker.pl --genome=/path/to/examples/genome.fa --bam=/path/to/examples/RNAseq.bam \
   --prot_seq=/path/to/examples/proteins.fa --prg=gth --ALGNMENT_TOOL_PATH=/path/to/aligner

The runtime of this example should be around 46 hours on a 2.27 GHz single CPU.

              6. BUG REPORTING
              ----------------

If you found a bug, please contact katharina.hoff@uni-greifswald.de .

Information worth mentioning in your bug report:

Check in braker/yourSpecies/braker.log at which step braker.pl crashed.

There are a number of other files that might be of interest, depending on where in the pipeline the
problem occured:

 * braker/yourSpecies/errors/bam2hints.*.stderr - will give details on a bam2hints crash (step for 
                                                  converting bam file to intron gff file)
 
 * braker/yourSpecies/hintsfile.gff - is this file empty? If yes, something went wrong during hints 
                                      generation
                                    - does this file contain hints from source "b2h" and of type 
                                      "intron"? If not: GeneMark-ET will not be able to execute 
                                      properly.
 
 * braker/yourSpecies/startAlign.stderr - if you provided a protein fasta file and this file is not
                                          empty, something went wrong during protein alignment
   braker/yourSpecies/startAlign.stdout - may give clues on at which point protein alignment went
                                          wrong

 * braker/yourSpecies/(align_gth|align_exonerate|align_spaln)/*err - error files should be empty or
                                                                     not existing. If there are 
                                                                     error files, check the 
                                                                     content, those are errors 
                                                                     reported by the alignment 
                                                                     tools gth/exonerate/spaln, 
                                                                     themselves

 * braker/yourSpecies/errors/GeneMark-ET.stderr - errors reported by GeneMark-ET
   braker/yourSpecies/errors/GeneMark-ET.stdout - may give clues about the point at which errors in
                                                  GeneMark-ET occured

 * braker/yourSpecies/GeneMark-ET/genemark.gtf - is this file empty? If yes, something went wrong 
                                                 during executing GeneMark-ET

 * braker/yourSpecies/GeneMark-ET/genemark.f.good.gtf - is this file empty? If yes, something went
                                                        wrong during filtering GeneMark-ET genes 
                                                        for training AUGUSTUS
 
 * braker/yourSpecies/genbank.good.gb - try a "grep -c LOCUS genbank.good.gb" to determine the 
                                        number of training genes for training AUGUSTUS, should not
                                        be low

 * braker/yourSpecies/errors/firstetraining.stderr - if existing will contain errors from first 
                                                     iteration of training AUGUSTUS
   braker/yourSpecies/errors/secondetraining.stderr - if existing will contain errors from second
                                                      iteration of training AUGUSTUS
   braker/yourSpecies/errors/optimize_augustus.stderr - if existing will contain errors 
                                                        optimize_augustus.pl (additional training 
                                                        set for AUGUSTUS)

 * braker/yourSpecies/errors/augustus*.stderr - if existing will contain AUGUSTUS execution errors
